openapi: 3.1.0

info:
  title: e-commerce API
  version: 1.0.0
  description: A basic API for an e-commerce app

paths:
  /register:
    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user to the database
      operationId: register
      requestBody:
        description: User information
        content:
          application/json:
              example: |-
                {
                  "email": "example@gmail.com",
                  "password": "my-password"
                }
        required: true
      responses:
        '201':
          description: New user Object
          content:
            application/json:
              example: |-
                {
                  "id": 1111,
                  "firstName": null,
                  "lastName": null,
                  "email": "example@gmail.com",
                  "address": null,
                  "password": "hashed password"
                }

  /sign-in:
    post:
      tags:
        - Users
      summary: Login a user
      description: login an existing user to the app
      operationId: signin
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                User:
                  value: |- 
                    {
                      "id": 1,
                      "firstName": "Mohamed",
                      "lastName": "Ouanjine",
                      "email": "email.for.tv.elhajji@gmail.com",
                      "address": "Temara",
                      "password": "hashed_password"
                    }
        default:
          description: Default error sample response
      requestBody:
        description: User registration inforamations
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: my-password
                  format: password

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Get all users from database
      operationId: users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                Users:
                  value: |-
                    [
                      {
                        "id": 41,
                        "firstName": "Riyan",
                        "lastName": "Alwane",
                        "email": "riyan@gmail.com",
                        "address": "tamasna",
                        "password": "hashed_password"
                      },
                      {
                        "id": 42,
                        "firstName": "Rayan",
                        "lastName": "***",
                        "email": "rayan@gmail.com",
                        "address": "City",
                        "password": "hashed_password"
                      },
                      {
                        "id": 1,
                        "firstName": "Mohamed",
                        "lastName": "Ouanjine",
                        "email": "email.for.tv.elhajji@gmail.com",
                        "address": "Temara",
                        "password": "hashed_password"
                      }
                    ]
        default:
          description: Default error sample response

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get a users by ID
      description: Get all users from database
      operationId: get_user
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrive.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                User:
                  value: |-
                    {
                      "id": 1,
                      "firstName": "Mohamed",
                      "lastName": "Ouanjine",
                      "email": "email.for.tv.elhajji@gmail.com",
                      "address": "Temara",
                      "password": "hashed_password"
                    }
        default:
          description: Default error sample response

    put:
      tags:
        - Users
      summary: Update a user by ID.
      description: Update a user by their ID.
      operationId: put_user
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrive.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                UpdatedUser:
                  value: |-
                    {
                      "id": 1,
                      "firstName": "Mohamed",
                      "lastName": "Ouanjine",
                      "email": "email.for.tv.elhajji@gmail.com",
                      "address": "NYC USA",
                      "password": "hashed_password"
                    }
      requestBody:
        description: A new order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      summary: Delete a user by ID.
      description: Delete a user by their ID.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to deleted.
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: seccessful deletion
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              example: No such User has been founded.
          
  /products:
    post:
      tags:
        - Products
      summary: Create new product
      description: >-
        Ceate new product in the database using product's name, description and
        price
      operationId: postProducts
      responses:
        '201':
          description: New product created
          content:
            application/json:
              examples:
                New product:
                  value: |-
                    {
                        "id": 31,
                        "name": "foo",
                        "description": "baz baz",
                        "price": "$1,000,000.00",
                        "categoriesId": [
                            1
                        ]
                    }
      requestBody:
        description: New product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'

    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a list of all products
      operationId: products
      parameters:
        - name: categoryId
          in: query
          description: ID of the product to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                Products:
                  value: |-
                    [
                        {
                            "id": 2,
                            "name": "Laptop",
                            "description": "Powerful laptop for productivity",
                            "price": "$1,299.99"
                        },
                        {
                            "id": 3,
                            "name": "T-shirt",
                            "description": "Comfortable cotton T-shirt",
                            "price": "$19.99"
                        },
                        {
                            "id": 4,
                            "name": "Sofa",
                            "description": "Modern and comfortable sofa",
                            "price": "$499.99"
                        },
                        {
                            "id": 1,
                            "name": "SmartPhone",
                            "description": "High-performance smartphone",
                            "price": "$399.99"
                        }
                    ]

      x-codeSamples:
        - lang: http
          source: >
            # Try out with category parameter

            curl -X GET "http://localhost:4000/products?category=1" -H "accept:
            application/json"
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - $ref: "#/components/parameters/productId"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                get_product_by_id:
                  value: |-
                    {
                      "id": 1,
                      "name": "SmartPhone",
                      "description": "High-performance smartphone",
                      "price": "$399.99",
                      "categoriesId": [
                          1
                      ]
                    }
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              example:
                No such Product has been founded.

    put:
      tags:
        - Products
      summary: Update a product
      description: Update a product in the database using product's ID
      operationId: putProducts
      parameters:
        - $ref: "#/components/parameters/productId"
      responses:
        '200':
          description: successful operation
          content:
            applicatoin/json:
              examples:
              
                updated name:
                  value: |-
                    {
                      "id": 1,
                      "name": "New name",
                      "description": "High-performance smartphone",
                      "price": "$399.99",
                      "categoriesId": [
                        1
                      ]
                    }
                
                updated price:
                  value: |-
                    {
                      "id": 1,
                      "name": "New name",
                      "description": "High-performance smartphone",
                      "price": "$1,000,000",
                      "categoriesId": [
                        1
                      ]
                    }
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              example:
                No such Product has been founded.
      requestBody:
        description: New iformations
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'

    delete:
      tags:
        - Products
      summary: Delete a product
      description: Delete a product in the database using product's ID
      operationId: deleteProducts
      parameters:
        - $ref: "#/components/parameters/productId"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                delete product whose id is 31:
                  value: |-
                    {
                      "id": 31,
                      "name": "T-short",
                      "description": "white t-short for summer",
                      "price": "$1.00",
                      "categoriesId": [
                        2
                      ]
                    }
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              example:
                No such Product has been founded.
                    
  /carts:
    post:
      tags:
        - Carts
      summary: Create a cart
      description: Create new cart
      operationId: postCart
      requestBody:
        description: Cart object
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductCart"
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
          
  /carts/{cartId}:
    # Done
    get:
      tags:
        - Carts
      summary: Get a specific cart.
      description: get a cart by its ID (cartId).
      operationId: getCart
      parameters:
        - $ref: "#/components/parameters/cartId"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
                schema:
                  $ref: "#/components/schemas/Cart"
        '404':
          $ref: "#/components/responses/NotFoundCart"
             
    # done
    delete:
      tags:
        - Carts
      summary: Delete a cart.
      description: Delete a cart by its ID.
      operationId: deleteCart
      parameters:
        - $ref: "#/components/parameters/cartId"
      responses:
        '204':
          description: successful deletion
        '404':
          $ref: "#/components/responses/NotFoundCart"
          
  /carts/{cartId}/items:
    # done
    post:
      tags:
        - Carts
      summary: Add a new product to the specified cart.
      description: Add a new product to the specified cart, by providing productId and quantity.
      parameters:
        - $ref: "#/components/parameters/cartId"
      requestBody:
        description: New items
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCart2"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              example: |-
                  {
                    "id": 1,
                    "items": [
                      {
                        "productId": 1111,
                        "quantity": 5
                      },
                      {
                        "productId": 2222,
                        "quantity": 3
                      }
                    ]
                  }
    # done
    delete:
      tags:
        - Carts
      summary: Remove all products from the cart.
      parameters:
        - $ref: "#/components/parameters/cartId"
      responses:
        '204':
          description: successful deletion
        '404':
          $ref: "#/components/responses/NotFoundCart"
            
  /carts/{cartId}/items/{productId}:
    # done
    put:
      tags:
        - Carts
      summary:  Update the quantity of a specific product in the cart.
      description: Update cart's product quantity by cartId and producId
      parameters:
        - $ref: "#/components/parameters/cartId"
        - $ref: "#/components/parameters/productId"
      requestBody:
        description: Update quantity of product whose ID is 2222.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 7
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              example: |-
                  {
                    "success": true,
                    "updatedProduct": {
                        "cartId": 1,
                        "productId": 2222,
                        "quantity": 7
                    }
                  }
                  
        '404':
          $ref: "#/components/responses/NotFoundCart"
    # done
    delete:
      tags:
        - Carts
      summary: Remove a specific product from the cart.
      parameters:
        - $ref: "#/components/parameters/cartId"
        - $ref: "#/components/parameters/productId"
      responses:
        '204':
          description: successful deletion
        '404':
          $ref: "#/components/responses/NotFoundCart"
          
  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders.
      description: Retrieve all orders a user have.
      operationId: getOrders
      responses:
        '200':
          description: successful operation.
          content:
            application/json:
              examples:
                all orders for an authenticated user:
                  value: |-
                    [
                      {
                        "id": 1,
                        "createdAt": "Sun Dec 02 2023 09:28:55 GMT+0100 (Central European Standard Time)",
                        "items": [
                          {
                            "productId": 1111,
                            "quantity": 5
                          },
                          {
                            "productId": 2222,
                            "quantity": 3
                          }
                        ]
                      },
                      {
                        "id": 2,
                        "createdAt": "Sun Dec 03 2023 09:28:55 GMT+0100 (Central European Standard Time)",
                        "items": [
                          {
                            "productId": 3333,
                            "quantity": 5
                          },
                          {
                            "productId": 4444,
                            "quantity": 3
                          }
                        ]
                      }
                    ]

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get an order
      description: Retrieve an order by its Id
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: The order id you want to retrive.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              examples:
                order whose id is 1:
                  value: |-
                    {
                      "id": 1,
                      "createdAt": "Sun Dec 03 2023 14:51:59 GMT+0100 (Central European Standard Time)",
                      "status": "shipped",
                      "items": [
                          {
                              "productId": 1111,
                              "quantity": 5
                          },
                          {
                              "productId": 2222,
                              "quantity": 7
                          }
                      ]
                    }

    delete:
      tags:
        - Orders
      summary: Delete an order
      description: Delete an order by its Id
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: The order id you want to delete.
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: successful deletion.
  
  /orders/{orderId}/status:
    put:
      tags:
        - Orders
      summary: Update the status of a specific order.
      description: Updae the status of a specific order by its ID (e.g. placed, processing, shipped, delivered, cancelled or returned).
      parameters:
        - name: orderId
          in: path
          description: The order's id you want to Update.
          required: true
          schema:
            type: integer
      requestBody:
        description: status property
        required: true
        content:
          application/json:
            examples:
              placed:
                value: |-
                  {
                    "status": "placed"
                  }
              processing:
                value: |-
                  {
                    "status": "processing"
                  }
              shipped:
                value: |-
                  {
                    "status": "shipped"
                  }
              delivered:
                value: |-
                  {
                    "status": "delivered"
                  }
              cancelled:
                value: |-
                  {
                    "status": "cancelled"
                  }
              returned:
                value: |-
                  {
                    "status": "returned"
                  }
      responses:
        '200':
          description: successful updated.
          content:
            application/json:
              examples:
                placed:
                  value: |-
                    {
                      "id": 1,
                      "createdAt": "Sun Dec 02 2023 14:51:59 GMT+0100 (Central European Standard Time)",
                      "status": "placed"
                    }
                processing:
                  value: |-
                    {
                      "id": 1,
                      "createdAt": "Sun Dec 02 2023 14:51:59 GMT+0100 (Central European Standard Time)",
                      "status": "processing"
                    }
                shipped:
                  value: |-
                    {
                      "id": 1,
                      "createdAt": "Sun Dec 02 2023 14:51:59 GMT+0100 (Central European Standard Time)",
                      "status": "shipped"
                    }
                delivered:
                  value: |-
                    {
                      "id": 1,
                      "createdAt": "Sun Dec 02 2023 14:51:59 GMT+0100 (Central European Standard Time)",
                      "status": "delivered"
                    }
                cancelled:
                  value: |-
                    {
                      "id": 1,
                      "createdAt": "Sun Dec 02 2023 14:51:59 GMT+0100 (Central European Standard Time)",
                      "status": "cancelled"
                    }
                returned:
                  value: |-
                    {
                      "id": 1,
                      "createdAt": "Sun Dec 02 2023 14:51:59 GMT+0100 (Central European Standard Time)",
                      "status": "returned"
                    }
                    
  /orders/{orderId}/items:
    post:
      tags:
        - Orders
      summary: Add new items
      description: add new items to an existing order
      parameters:
        - name: orderId
          in: path
          description: The order's id you want to add items to.
          required: true
          schema:
            type: integer
      requestBody:
        description: New Product to add
        required: true
        content:
          application/json:
            example: |-
              {
                "productId": 3333,
                "quantity": 1
              }
      responses:
        '201':
          description: seccesful addition
          content:
            application/json:
              example: |-
                    {
                      "success": true,
                      "message": "Item successfully added to the order.",
                      "updatedOrder": {
                          "id": 1,
                          "items": [
                            {
                              "productId": 1111,
                              "quantity": 5
                            },
                            {
                              "productId": 2222,
                              "quantity": 7
                            },
                            {
                              "productId": 3333,
                              "quantity": 1
                            }
                          ]
                      }
                    }
                    

        '400':
          description: Invalid input data
          content:
            text/plain; charset=utf-8:
              example: |-
                Invalid request payload. Please check the data format.
                
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              examples:
                order not found:
                  value: No such Order has been founded.
                product not found:
                  value: No such Product has been founded.
                
  /orders/{orderId}/items/{productId}:
    delete:
      tags:
        - Orders
      summary: Romove specific item from an order
      description:  Romove specific item from the order by order's ID and product's ID
      parameters:
        - name: orderId
          in: path
          description: The order's ID you want to romove product from.
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The product's ID to delete.
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: seccessful deletion
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              examples:
                order not found:
                  value: No such Order has been founded
                product not found:
                  value: No such Product has been founded
                order doesn't contain product:
                  value: The specified product does not exist in the order
          
    put:
      tags:
        - Orders
      summary: Update the quantity of a specific item in an order
      description: Updated the quantity of a specific item in an order by orderId and productId
      parameters:
        - name: orderId
          in: path
          description: The order's ID you want to updated.
          required: true
          schema:
            type: integer
            example: 1
        - name: productId
          in: path
          description: The product's ID to updated its quantity.
          required: true
          schema:
            type: integer
            example: 1111
      requestBody:
        description: The new quantity
        content:
          application/json:
            example: |-
              {
                "quantity": 3
              }
      responses:
        '200':
          description: successful update
          content:
            application/json:
              example: |-
                    {
                      "success": true,
                      "message": "Item quantity updated successfully",
                      "updatedItem": {
                        "id": 1111,
                        "quantity": 3
                      }
                    }
        '400':
          description: Invalid input data
          content:
            text/plain; charset=utf-8:
              example: |-
                Invalid request payload. Please check the data format.
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              examples:
                order not found:
                  value: No such Order has been founded
                product not found:
                  value: No such Product has been founded
                order doesn't contain product:
                  value: The specified product does not exist in the order
            
  /carts/{cartId}/checkout:
    # done 
    post:
      tags:
        - Carts
      summary: Create an order
      description: Create new order base on the given cart
      operationId: postOrder
      parameters:
        - $ref: "#/components/parameters/cartId"
      responses:
        '201':
          description: successful creation.
          content:
            application/json:
              example: |-
                {
                  "orderId": 1,
                  "items": [
                      {
                          "productId": 1111,
                          "quantity": 5
                      },
                      {
                          "productId": 2222,
                          "quantity": 7
                      }
                  ]
                }
                
        '404':
          $ref: "#/components/responses/NotFoundCart"

components:
  schemas:
    User:
      required:
        - email
        - password
      type: object
      properties:
        firstName:
          type: string
          example: Elon
        lastName:
          type: string
          example: Musk
        email:
          type: string
          example: example@gmail.com
        address:
          type: string
          example: NYC USA
        password:
          type: string
          example: hashed_password
          format: password
      xml:
        name: User
        
    Product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        imageUrl:
          type: string
        categoriesId:
          type: array
          items:
            type: integer
    ProductCart:
      type: object
      properties:
        productId:
          type: integer
          example: 1111
        quantity:
          type: integer
          example: 5
    ProductCart2:
      type: object
      properties:
        productId:
          type: integer
          example: 2222
        quantity:
          type: integer
          example: 3
    Cart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        createdAt:
          type: string
          example: Sat Dec 02 2023 12:54:56 GMT+0100 (Central European Standard Time)
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductCart"
    Cart2:
      type: object
      properties:
        cartId:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: "#/components/schemas/ProductCart2"
            
  parameters:
    productId:
      name: productId
      in: path
      description: The product's ID to fetch
      required: true
      schema:
        type: integer
    cartId:
      name: cartId
      in: path
      description: The cart's ID to fetch
      required: true
      schema:
        type: integer

  requestBodies:
    Cart:
      description: Cart object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ProductCart"

  responses:
    NotFoundCart:
      description: Not found
      content:
        text/plain; charset=utf-8:
          example:
            No such Cart has been founded.